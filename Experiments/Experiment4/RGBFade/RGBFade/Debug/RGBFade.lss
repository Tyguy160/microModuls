
RGBFade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000379  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000174  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a8  00000000  00000000  000006b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b2  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000251  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
}

int main() {
	
	// Set LED pins to be outputs
	LED_DDR |= (1 << RED_PIN);
  80:	20 9a       	sbi	0x04, 0	; 4
	LED_DDR |= (1 << GREEN_PIN);
  82:	21 9a       	sbi	0x04, 1	; 4
	LED_DDR |= (1 << BLUE_PIN);
  84:	22 9a       	sbi	0x04, 2	; 4
	
	uint8_t brightness = 0;
	int8_t direction = 1;
	uint8_t color = -1;
	
	LED_DDR |= ((1 << RED_PIN) | (1 << GREEN_PIN) | (1 << BLUE_PIN));
  86:	84 b1       	in	r24, 0x04	; 4
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	84 b9       	out	0x04, r24	; 4
	LED_DDR |= (1 << GREEN_PIN);
	LED_DDR |= (1 << BLUE_PIN);
	
	uint8_t brightness = 0;
	int8_t direction = 1;
	uint8_t color = -1;
  8c:	2f ef       	ldi	r18, 0xFF	; 255
	LED_DDR |= (1 << RED_PIN);
	LED_DDR |= (1 << GREEN_PIN);
	LED_DDR |= (1 << BLUE_PIN);
	
	uint8_t brightness = 0;
	int8_t direction = 1;
  8e:	31 e0       	ldi	r19, 0x01	; 1
	// Set LED pins to be outputs
	LED_DDR |= (1 << RED_PIN);
	LED_DDR |= (1 << GREEN_PIN);
	LED_DDR |= (1 << BLUE_PIN);
	
	uint8_t brightness = 0;
  90:	90 e0       	ldi	r25, 0x00	; 0
			if (color >= NUMBER_OF_COLORS) {
				color = RED;
			}
		}
		if (brightness == 255) {
			direction = -1;
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	51 e0       	ldi	r21, 0x01	; 1
		
        if (brightness == 0) {
			direction = 1;
			color++;
			if (color >= NUMBER_OF_COLORS) {
				color = RED;
  96:	40 e0       	ldi	r20, 0x00	; 0
	LED_DDR |= ((1 << RED_PIN) | (1 << GREEN_PIN) | (1 << BLUE_PIN));
	
	// Loop forever
	while(1) {	
		
        if (brightness == 0) {
  98:	91 11       	cpse	r25, r1
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <main+0x24>
			direction = 1;
			color++;
  9c:	2f 5f       	subi	r18, 0xFF	; 255
			if (color >= NUMBER_OF_COLORS) {
  9e:	23 30       	cpi	r18, 0x03	; 3
  a0:	90 f5       	brcc	.+100    	; 0x106 <main+0x86>
  a2:	32 c0       	rjmp	.+100    	; 0x108 <main+0x88>
				color = RED;
			}
		}
		if (brightness == 255) {
  a4:	9f 3f       	cpi	r25, 0xFF	; 255
  a6:	09 f4       	brne	.+2      	; 0xaa <main+0x2a>
			direction = -1;
  a8:	36 2f       	mov	r19, r22
		}
		brightness += direction;
  aa:	93 0f       	add	r25, r19
		
		if (color == RED) {
  ac:	21 11       	cpse	r18, r1
  ae:	0d c0       	rjmp	.+26     	; 0xca <main+0x4a>
			LED_PORT |= (1 << RED_PIN);
  b0:	28 9a       	sbi	0x05, 0	; 5
			for (uint8_t i = 0; i < 255; i++) {
  b2:	84 2f       	mov	r24, r20
				if (i >= brightness) {
  b4:	89 17       	cp	r24, r25
  b6:	08 f0       	brcs	.+2      	; 0xba <main+0x3a>
					LED_PORT = 0;
  b8:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	76 e0       	ldi	r23, 0x06	; 6
  bc:	7a 95       	dec	r23
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x3c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
		}
		brightness += direction;
		
		if (color == RED) {
			LED_PORT |= (1 << RED_PIN);
			for (uint8_t i = 0; i < 255; i++) {
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	8f 3f       	cpi	r24, 0xFF	; 255
  c6:	b1 f7       	brne	.-20     	; 0xb4 <main+0x34>
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <main+0x18>
				}
				_delay_us(20);
			}
		}
		
		if (color == GREEN) {
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	69 f4       	brne	.+26     	; 0xe8 <main+0x68>
			LED_PORT |= (1 << GREEN_PIN);
  ce:	29 9a       	sbi	0x05, 1	; 5
			for (uint8_t i = 0; i < 255; i++) {
  d0:	84 2f       	mov	r24, r20
				if (i >= brightness) {
  d2:	89 17       	cp	r24, r25
  d4:	08 f0       	brcs	.+2      	; 0xd8 <main+0x58>
					LED_PORT = 0;
  d6:	15 b8       	out	0x05, r1	; 5
  d8:	76 e0       	ldi	r23, 0x06	; 6
  da:	7a 95       	dec	r23
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x5a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
			}
		}
		
		if (color == GREEN) {
			LED_PORT |= (1 << GREEN_PIN);
			for (uint8_t i = 0; i < 255; i++) {
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	8f 3f       	cpi	r24, 0xFF	; 255
  e4:	b1 f7       	brne	.-20     	; 0xd2 <main+0x52>
  e6:	d8 cf       	rjmp	.-80     	; 0x98 <main+0x18>
				}
				_delay_us(20);
			}
		}
		
		if (color == BLUE) {
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	b1 f6       	brne	.-84     	; 0x98 <main+0x18>
			LED_PORT |= (1 << BLUE_PIN);
  ec:	2a 9a       	sbi	0x05, 2	; 5
			for (uint8_t i = 0; i < 255; i++) {
  ee:	84 2f       	mov	r24, r20
				if (i >= brightness) {
  f0:	89 17       	cp	r24, r25
  f2:	08 f0       	brcs	.+2      	; 0xf6 <main+0x76>
					LED_PORT = 0;
  f4:	15 b8       	out	0x05, r1	; 5
  f6:	76 e0       	ldi	r23, 0x06	; 6
  f8:	7a 95       	dec	r23
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x78>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
			}
		}
		
		if (color == BLUE) {
			LED_PORT |= (1 << BLUE_PIN);
			for (uint8_t i = 0; i < 255; i++) {
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	8f 3f       	cpi	r24, 0xFF	; 255
 102:	b1 f7       	brne	.-20     	; 0xf0 <main+0x70>
 104:	c9 cf       	rjmp	.-110    	; 0x98 <main+0x18>
		
        if (brightness == 0) {
			direction = 1;
			color++;
			if (color >= NUMBER_OF_COLORS) {
				color = RED;
 106:	24 2f       	mov	r18, r20
			}
		}
		if (brightness == 255) {
			direction = -1;
 108:	35 2f       	mov	r19, r21
 10a:	cf cf       	rjmp	.-98     	; 0xaa <main+0x2a>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
